#This script looks at burst mode data windows, and normalizes where we see whistlers by how many times Juno was taking burst mode data there
binSize= getParam( 'Bin Size', 0.1, 'Bin Size', [0.1, 0.01] )
mshells= getDataSet( 'file:///home/jbf/project/juno/waveformIntervals/ap1/waveforms_$x.dat?field2' )
whistlers= getDataSet( 'file:///home/jbf/project/juno/u/andrew/2025/20250225/WhistlerPlots/JeremyNewPlots.csv?column=mshell&time=YMD&timeFormat=$Y$m$d+$H$M$S' )

r= extent(xtags(whistlers))

print 'mshells: ', mshells
mshells= mshells[where(within( xtags(mshells),r ))]
print 'mshells included: ', mshells

normalizeBy= histogram(mshells,0.005,10.005,binSize) #start and end values are hardcoded but it fits our data so it's good
whistlersByMShell= histogram(whistlers,0.005,10.005,binSize)

p,_= plot( 0, whistlersByMShell )
annotation( 0, plotId=p.id, anchorPosition='NW', text='Whistlers Observed' )

p,_= plot( 1, normalizeBy )
annotation( 1, plotId=p.id, anchorPosition='NW', text='Burst Packets (total observations)' )

p,_= plot( 2, whistlersByMShell / normalizeBy * 100, ytitle='% observed' )
annotation( 2, plotId=p.id, anchorPosition='NW', text='Whistlers (% of observations)' )
#just checking to make sure we have 100% here
temp = []
for i in (whistlersByMShell / normalizeBy):
    temp.append(i)
print(sum(temp[10:]))

bind( dom.plots[0].xaxis, 'range', dom.plots[1].xaxis, 'range' )
bind( dom.plots[0].xaxis, 'range', dom.plots[2].xaxis, 'range' )
